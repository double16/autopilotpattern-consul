#!/bin/bash -e

. ./hooks/env

JQ="docker run --rm -i articulate/jq"
CONSUL_COUNT=${1:-3}

function retry {
  local retry_max=$1
  shift

  local count=$retry_max
  while [ $count -gt 0 ]; do
    "$@" && break
    count=$(($count - 1))
    sleep 3
  done

  [ $count -eq 0 ] && {
    echo "Retry failed [$retry_max]: $@" >&2
    return 1
  }
  return 0
}

function finish {
  RESULT=$?
  docker-compose -p consultest -f hooks/docker-compose.yml logs
  docker-compose -p consultest -f hooks/docker-compose.yml exec -T consul consul members || true
  docker-compose -p consultest -f hooks/docker-compose.yml down
  [ $RESULT = 0 ] && echo "PASS" || echo "FAIL"
}
trap finish EXIT

function passing_service {
  echo -n "Checking if service $1 is passing ... "
  docker run --rm --network container:consultest_consul_1 appropriate/curl -s http://localhost:8500/v1/health/state/passing | grep -q "ServiceName.*$1"
  RESULT=$?
  [ $RESULT = 0 ] && echo "PASS" || echo "FAIL"
  return $RESULT
}

function until_started {
  while docker-compose -p consultest -f hooks/docker-compose.yml ps -q | xargs docker inspect | ${JQ} -r .[].State.Health.Status | grep -q starting; do
    echo "Waiting for services to start ..."
    sleep 15s
  done
}

function test_suite {
  for I in $(seq 1 ${CONSUL_COUNT}); do
    retry 30 docker exec consultest_consul_${I} curl -sf http://localhost:8500/v1/health/state/passing
    echo
  done

  retry 15 passing_service consul

  retry 5 docker run --rm --network container:consultest_consul_1 appropriate/curl -sf -o /dev/null http://localhost:9090/metrics
  retry 5 passing_service containerpilot

  retry 5 docker run --rm --network container:consultest_consul_1 appropriate/curl -sf -o /dev/null http://localhost:9100/metrics
  retry 5 passing_service node-exporter
}

export IMAGE_NAME
docker-compose -p consultest -f hooks/docker-compose.yml up -d --scale consul=${CONSUL_COUNT}
until_started

test_suite

docker-compose -p consultest -f hooks/docker-compose.yml ps -q | xargs docker restart
until_started

test_suite
